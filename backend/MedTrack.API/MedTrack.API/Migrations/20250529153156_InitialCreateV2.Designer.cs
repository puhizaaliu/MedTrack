// <auto-generated />
using System;
using MedTrack.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MedTrack.API.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250529153156_InitialCreateV2")]
    partial class InitialCreateV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MedTrack.API.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time(6)");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MedTrack.API.Models.ChronicDisease", b =>
                {
                    b.Property<int>("DiseaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DiseaseName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DiseaseId");

                    b.ToTable("ChronicDiseases");
                });

            modelBuilder.Entity("MedTrack.API.Models.Doctor", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("SpecializationId");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("MedTrack.API.Models.FamilyHistory", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ConditionName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("HistoryId");

                    b.ToTable("FamilyHistories");
                });

            modelBuilder.Entity("MedTrack.API.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("PaymentStatus")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("MedTrack.API.Models.MedicalInfo", b =>
                {
                    b.Property<int>("MedicalInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Alcohol")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Allergies")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Medications")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PhysicalActivity")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Smoking")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("MedicalInfoId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("MedicalInfos");
                });

            modelBuilder.Entity("MedTrack.API.Models.Patient", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("MedTrack.API.Models.PatientChronicDisease", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("DiseaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ChronicDiseaseDiseaseId")
                        .HasColumnType("int");

                    b.Property<string>("OtherText")
                        .HasColumnType("longtext");

                    b.Property<int?>("PatientUserId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "DiseaseId");

                    b.HasIndex("ChronicDiseaseDiseaseId");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("PatientUserId");

                    b.ToTable("PatientChronicDiseases");
                });

            modelBuilder.Entity("MedTrack.API.Models.PatientFamilyHistory", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("HistoryId")
                        .HasColumnType("int");

                    b.Property<int?>("FamilyHistoryHistoryId")
                        .HasColumnType("int");

                    b.Property<string>("OtherText")
                        .HasColumnType("longtext");

                    b.Property<int?>("PatientUserId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "HistoryId");

                    b.HasIndex("FamilyHistoryHistoryId");

                    b.HasIndex("HistoryId");

                    b.HasIndex("PatientUserId");

                    b.ToTable("PatientFamilyHistories");
                });

            modelBuilder.Entity("MedTrack.API.Models.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("ServiceId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("MedTrack.API.Models.Specialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("SpecializationId");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("MedTrack.API.Models.SpecializationService", b =>
                {
                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("SpecializationId", "ServiceId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SpecializationServices");
                });

            modelBuilder.Entity("MedTrack.API.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MedTrack.API.Models.Appointment", b =>
                {
                    b.HasOne("MedTrack.API.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedTrack.API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedTrack.API.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("MedTrack.API.Models.Doctor", b =>
                {
                    b.HasOne("MedTrack.API.Models.Specialization", "Specialization")
                        .WithMany("Doctors")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedTrack.API.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("MedTrack.API.Models.Doctor", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Specialization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedTrack.API.Models.Invoice", b =>
                {
                    b.HasOne("MedTrack.API.Models.Appointment", "Appointment")
                        .WithOne()
                        .HasForeignKey("MedTrack.API.Models.Invoice", "AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("MedTrack.API.Models.MedicalInfo", b =>
                {
                    b.HasOne("MedTrack.API.Models.Patient", "Patient")
                        .WithOne("MedicalInfo")
                        .HasForeignKey("MedTrack.API.Models.MedicalInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedTrack.API.Models.Patient", b =>
                {
                    b.HasOne("MedTrack.API.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("MedTrack.API.Models.Patient", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MedTrack.API.Models.PatientChronicDisease", b =>
                {
                    b.HasOne("MedTrack.API.Models.ChronicDisease", null)
                        .WithMany("PatientLinks")
                        .HasForeignKey("ChronicDiseaseDiseaseId");

                    b.HasOne("MedTrack.API.Models.ChronicDisease", "Disease")
                        .WithMany()
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedTrack.API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedTrack.API.Models.Patient", null)
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("PatientUserId");

                    b.Navigation("Disease");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedTrack.API.Models.PatientFamilyHistory", b =>
                {
                    b.HasOne("MedTrack.API.Models.FamilyHistory", null)
                        .WithMany("PatientLinks")
                        .HasForeignKey("FamilyHistoryHistoryId");

                    b.HasOne("MedTrack.API.Models.FamilyHistory", "History")
                        .WithMany()
                        .HasForeignKey("HistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedTrack.API.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedTrack.API.Models.Patient", null)
                        .WithMany("FamilyHistories")
                        .HasForeignKey("PatientUserId");

                    b.Navigation("History");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("MedTrack.API.Models.SpecializationService", b =>
                {
                    b.HasOne("MedTrack.API.Models.Service", "Service")
                        .WithMany("SpecializationServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedTrack.API.Models.Specialization", "Specialization")
                        .WithMany("SpecializationServices")
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("MedTrack.API.Models.ChronicDisease", b =>
                {
                    b.Navigation("PatientLinks");
                });

            modelBuilder.Entity("MedTrack.API.Models.FamilyHistory", b =>
                {
                    b.Navigation("PatientLinks");
                });

            modelBuilder.Entity("MedTrack.API.Models.Patient", b =>
                {
                    b.Navigation("ChronicDiseases");

                    b.Navigation("FamilyHistories");

                    b.Navigation("MedicalInfo");
                });

            modelBuilder.Entity("MedTrack.API.Models.Service", b =>
                {
                    b.Navigation("SpecializationServices");
                });

            modelBuilder.Entity("MedTrack.API.Models.Specialization", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("SpecializationServices");
                });
#pragma warning restore 612, 618
        }
    }
}
